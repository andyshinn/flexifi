#ifndef FLEXIFI_WEB_ASSETS_H
#define FLEXIFI_WEB_ASSETS_H

/*
 * Auto-generated file containing embedded web assets for Flexifi
 * 
 * DO NOT EDIT MANUALLY!
 * 
 * This file is generated by tools/embed_assets.py
 * Re-run the script to update the embedded assets.
 */

#include <Arduino.h>

namespace FlexifiAssets {

    // HTML Templates

// Generated from: /Users/andy/GitHub/andyshinn/flexifi/src/web/templates/modern.html (minified: 2258 bytes)
const char template_modern[] PROGMEM = R"FLEXIFI(<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{TITLE}}</title>
    <style>{{CSS_MODERN}}</style>
    <link rel="stylesheet" href="/src/web/css/modern.css">
    <script src="/src/web/js/portal.js"></script>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>{{TITLE}}</h1>
            <p class="subtitle">Configure your WiFi connection</p>
        </div>

        <div class="status-panel">
            <div id="status">{{STATUS}}</div>
        </div>

        <div class="wifi-panel">
            <div class="networks-header">
                <h2>Available Networks</h2>
                <div class="button-group">
                    <button id="manualToggleBtn" class="btn btn-secondary btn-compact">Enter Manually</button>
                    <button id="scanBtn" class="btn btn-secondary btn-compact">
                        <span id="scanBtnText">Scan</span>
                        <span id="scanSpinner" class="spinner" style="display: none;">‚ü≥</span>
                    </button>
                    <button id="resetBtn" class="btn btn-danger btn-compact">Reset Configuration</button>
                </div>
            </div>
            <div id="networks" class="networks">{{NETWORKS}}</div>
        </div>

        <div class="connect-panel">
            <div id="manualConnectForm" class="manual-form" style="display: none;">
                <h3>Manual Connection</h3>
                <form id="connectForm">
                    <div class="form-group">
                        <label for="ssid">Network Name (SSID):</label>
                        <input type="text" id="ssid" name="ssid" required>
                    </div>
                    <div class="form-group">
                        <label for="password">Password:</label>
                        <input type="password" id="password" name="password">
                    </div>
                    {{CUSTOM_PARAMETERS}}
                    <button type="submit" class="btn btn-primary btn-compact">Connect</button>
                </form>
            </div>
        </div>
    </div>

    <script>{{JS_PORTAL}}</script>
</body>
</html>
)FLEXIFI";
const size_t template_modern_len = sizeof(template_modern) - 1;

// Generated from: /Users/andy/GitHub/andyshinn/flexifi/src/web/templates/classic.html (minified: 1329 bytes)
const char template_classic[] PROGMEM = R"FLEXIFI(<!DOCTYPE html>
<html>
<head>
    <title>{{TITLE}}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>{{CSS_CLASSIC}}</style>
</head>
<body>
    <div class="container">
        <h1>{{TITLE}}</h1>
        
        <div class="panel">
            <h2>Status</h2>
            <div id="status">{{STATUS}}</div>
        </div>
        
        <div class="panel">
            <h2>WiFi Networks</h2>
            <button onclick="scanNetworks()">Scan</button>
            <div id="networks">{{NETWORKS}}</div>
        </div>
        
        <div class="panel">
            <h2>Connect</h2>
            <form onsubmit="connectToWiFi(); return false;">
                <p>
                    <label>SSID:</label><br>
                    <input type="text" id="ssid" required>
                </p>
                <p>
                    <label>Password:</label><br>
                    <input type="password" id="password">
                </p>
                {{CUSTOM_PARAMETERS}}
                <p>
                    <button type="submit">Connect</button>
                </p>
            </form>
        </div>
        
        <div class="panel">
            <button onclick="resetConfig()">Reset</button>
        </div>
    </div>
    
    <script>{{JS_PORTAL}}</script>
</body>
</html>)FLEXIFI";
const size_t template_classic_len = sizeof(template_classic) - 1;

// Generated from: /Users/andy/GitHub/andyshinn/flexifi/src/web/templates/minimal.html (minified: 696 bytes)
const char template_minimal[] PROGMEM = R"FLEXIFI(<!DOCTYPE html>
<html>
<head>
    <title>{{TITLE}}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>{{CSS_MINIMAL}}</style>
</head>
<body>
    <h1>{{TITLE}}</h1>
    <div id="status">{{STATUS}}</div>
    <button onclick="scanNetworks()">Scan</button>
    <div id="networks">{{NETWORKS}}</div>
    <form onsubmit="connectToWiFi(); return false;">
        SSID: <input type="text" id="ssid" required><br>
        Password: <input type="password" id="password"><br>
        {{CUSTOM_PARAMETERS}}
        <button type="submit">Connect</button>
    </form>
    <button onclick="resetConfig()">Reset</button>
    <script>{{JS_PORTAL}}</script>
</body>
</html>)FLEXIFI";
const size_t template_minimal_len = sizeof(template_minimal) - 1;

    // CSS Stylesheets

// Generated from: /Users/andy/GitHub/andyshinn/flexifi/src/web/css/classic.css (minified: 1149 bytes)
const char css_classic[] PROGMEM = R"FLEXIFI(body { 
    font-family: Arial, sans-serif; 
    margin: 0; 
    padding: 20px; 
    background: #f5f5f5; 
}

.container { 
    max-width: 600px; 
    margin: 0 auto; 
    background: white; 
    padding: 20px; 
    border-radius: 5px; 
    box-shadow: 0 2px 10px rgba(0,0,0,0.1); 
}

h1 { 
    color: #333; 
    text-align: center; 
}

h2 { 
    color: #666; 
    border-bottom: 2px solid #eee; 
    padding-bottom: 10px; 
}

.panel { 
    margin-bottom: 20px; 
    padding: 15px; 
    border: 1px solid #ddd; 
    border-radius: 5px; 
}

button { 
    padding: 10px 20px; 
    background: #007cba; 
    color: white; 
    border: none; 
    border-radius: 3px; 
    cursor: pointer; 
}

button:hover { 
    background: #005a8b; 
}

input, select, textarea { 
    padding: 8px; 
    margin: 5px 0; 
    border: 1px solid #ddd; 
    border-radius: 3px; 
}

#status { 
    padding: 10px; 
    margin: 10px 0; 
    border-radius: 3px; 
    background: #f0f0f0; 
}

.network-item { 
    padding: 10px; 
    margin: 5px 0; 
    border: 1px solid #eee; 
    border-radius: 3px; 
    cursor: pointer; 
}

.network-item:hover { 
    background: #f9f9f9; 
})FLEXIFI";
const size_t css_classic_len = sizeof(css_classic) - 1;

// Generated from: /Users/andy/GitHub/andyshinn/flexifi/src/web/css/minimal.css (minified: 427 bytes)
const char css_minimal[] PROGMEM = R"FLEXIFI(body { 
    font-family: Arial, sans-serif; 
    margin: 20px; 
}

button { 
    padding: 5px 10px; 
    margin: 5px; 
}

input, select, textarea { 
    padding: 5px; 
    margin: 2px; 
}

#status { 
    padding: 5px; 
    margin: 10px 0; 
    background: #f0f0f0; 
}

.network-item { 
    padding: 5px; 
    margin: 2px; 
    border: 1px solid #ccc; 
    cursor: pointer; 
}

.network-item:hover { 
    background: #f5f5f5; 
})FLEXIFI";
const size_t css_minimal_len = sizeof(css_minimal) - 1;

// Generated from: /Users/andy/GitHub/andyshinn/flexifi/src/web/css/modern.css (minified: 4409 bytes)
const char css_modern[] PROGMEM = R"FLEXIFI(* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    padding: 10px; /* Reduced for captive portal */
}

.container {
    max-width: 600px;
    margin: 0 auto;
    background: white;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    overflow: hidden;
}

.header {
    background: #4a5568;
    color: white;
    padding: 15px; /* Reduced padding */
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.header h1 {
    font-size: 1.5em; /* Smaller title */
    margin-bottom: 0; /* No margin for inline layout */
}

.subtitle {
    opacity: 0.9;
}

.status-panel, .wifi-panel, .connect-panel, .actions {
    padding: 12px; /* Further reduced padding for compact layout */
}

.status-panel {
    padding: 8px 12px; /* Minimal padding for status */
}

.status {
    padding: 15px;
    border-radius: 8px;
    font-weight: 500;
}

.status.ready {
    background: #e6fffa;
    color: #065f46;
}

.status.scanning {
    background: #fef3c7;
    color: #92400e;
}

.status.connecting {
    background: #dbeafe;
    color: #1e40af;
}

.status.connected {
    background: #dcfce7;
    color: #166534;
}

.status.failed {
    background: #fee2e2;
    color: #dc2626;
}

.status.error {
    background: #fee2e2;
    color: #dc2626;
}

.status.throttled {
    background: #fef3c7;
    color: #92400e;
}

.btn {
    padding: 12px 24px;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
}

.btn-primary {
    background: #3b82f6;
    color: white;
}

.btn-primary:hover {
    background: #2563eb;
}

.btn-secondary {
    background: #6b7280;
    color: white;
}

.btn-secondary:hover {
    background: #4b5563;
}

.btn-danger {
    background: #ef4444;
    color: white;
}

.btn-danger:hover {
    background: #dc2626;
}

.form-group {
    margin-bottom: 10px; /* More compact spacing */
    display: flex;
    align-items: center;
    gap: 12px;
}

.form-group label {
    min-width: 120px; /* Fixed width for alignment */
    margin-bottom: 0;
    font-weight: 500;
    flex-shrink: 0; /* Prevent label from shrinking */
}

.form-group input, .form-group select, .form-group textarea {
    flex: 1; /* Take remaining space */
    padding: 10px; /* Reduced padding for compactness */
    border: 2px solid #e5e7eb;
    border-radius: 6px;
    font-size: 16px;
}

.form-group input:focus, .form-group select:focus, .form-group textarea:focus {
    outline: none;
    border-color: #3b82f6;
}

.network-list {
    margin-top: 15px;
}

.network-item {
    padding: 12px;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    margin-bottom: 8px;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.network-item:hover {
    background: #f9fafb;
}

.network-name {
    font-weight: 500;
}

.network-info {
    color: #6b7280;
}

.actions {
    text-align: center;
}

.required {
    color: #dc2626;
}

/* Manual connect toggle */
.manual-connect-toggle {
    text-align: center;
    margin-bottom: 10px;
}

.manual-form {
    padding-top: 0px; /* Compact spacing */
}

.manual-form h3 {
    margin-bottom: 8px; /* Reduced spacing */
    color: #374151;
    font-size: 1.0em; /* Smaller font */
}

/* Scan button spinner */
.spinner {
    display: inline-block;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

.btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
}

/* Compact network list for captive portal */
.network-item {
    padding: 8px 12px; /* Reduced padding */
}

/* Reduce heading sizes for compact layout */
h2 {
    font-size: 1.2em;
    margin-bottom: 10px;
}

/* Networks header with inline scan button */
.networks-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 12px;
}

.networks-header h2 {
    margin-bottom: 0;
    flex-grow: 1;
}

/* Compact scan button */
.btn-compact {
    padding: 8px 16px;
    font-size: 13px;
    min-width: 60px;
}

/* Button group layout */
.button-group {
    display: flex;
    gap: 8px;
}

.button-group .btn {
    margin: 0;
}
)FLEXIFI";
const size_t css_modern_len = sizeof(css_modern) - 1;

    // JavaScript Files

// Generated from: /Users/andy/GitHub/andyshinn/flexifi/src/web/js/portal.js (minified: 13475 bytes)
const char js_portal[] PROGMEM = R"FLEXIFI(let ws = null;
let scanInProgress = false;

function initWebSocket() {
    if ('WebSocket' in window) {
        console.log('Initializing WebSocket connection...');
        ws = new WebSocket('ws://' + window.location.host + '/ws');
        ws.onopen = function() { 
            console.log('‚úÖ WebSocket connected successfully'); 
        };
        ws.onmessage = function(event) { 
            console.log('üì® WebSocket message received:', event.data);
            handleWebSocketMessage(event.data); 
        };
        ws.onclose = function() { 
            console.log('‚ùå WebSocket disconnected, reconnecting...'); 
            setTimeout(initWebSocket, 5000); 
        };
        ws.onerror = function(error) { 
            console.log('‚ö†Ô∏è WebSocket error:', error); 
        };
    } else {
        console.log('‚ö†Ô∏è WebSocket not supported by browser');
    }
}

function handleWebSocketMessage(data) {
    try {
        const msg = JSON.parse(data);
        console.log('üì• WebSocket message received:', msg);
        
        if (msg.type === 'scan_complete') {
            updateNetworks(msg.data.networks);
            scanInProgress = false;
            updateScanButton(false); // Re-enable scan button
        } else if (msg.type === 'status_update') {
            updateStatus(msg.data.status, msg.data.message);
        } else if (msg.hasOwnProperty('success')) {
            // Handle scan response (success/failure/throttled)
            console.log('üìã WebSocket scan response:', msg);
            
            if (msg.success) {
                console.log('‚úÖ Scan initiated via WebSocket');
                // Keep scanning state - wait for scan_complete
            } else {
                // Scan failed or throttled
                console.log('‚ö†Ô∏è Scan failed via WebSocket:', msg.message);
                scanInProgress = false;
                updateScanButton(false); // Re-enable button
                
                if (msg.message && msg.message.includes('throttle')) {
                    updateStatus('throttled', msg.message);
                } else {
                    updateStatus('error', msg.message || 'Scan failed');
                }
                updateNetworks([]); // Clear networks
            }
        }
    } catch (e) {
        console.error('Error parsing WebSocket message:', e);
    }
}

function scanNetworks() {
    if (scanInProgress) {
        console.log('‚ö†Ô∏è Scan already in progress, ignoring request');
        return;
    }
    
    console.log('üîç Starting network scan...');
    scanInProgress = true;
    updateScanButton(true); // Disable and show spinner
    updateStatus('scanning', 'Scanning for networks...');
    
    // Clear network list immediately when scan starts and ensure it's visible
    const networksList = document.getElementById('networks');
    const manualForm = document.getElementById('manualConnectForm');
    const toggleBtn = document.getElementById('manualToggleBtn');
    
    networksList.style.display = 'block';
    manualForm.style.display = 'none';
    toggleBtn.textContent = 'Enter Manually';
    updateNetworks([], true); // Pass isScanning=true to show scanning message
    
    if (ws && ws.readyState === WebSocket.OPEN) {
        console.log('üì§ Sending scan request via WebSocket');
        ws.send(JSON.stringify({action: 'scan'}));
    } else {
        console.log('üì§ WebSocket not available, using HTTP fetch');
        fetch('/scan')
            .then(response => {
                console.log('üì° Scan response status:', response.status);
                return response.json();
            })
            .then(data => {
                console.log('üìã Scan data received:', data);
                scanInProgress = false;
                updateScanButton(false); // Re-enable button
                
                if (data.success && data.data) {
                    console.log('‚úÖ Scan successful, updating networks with:', data.data);
                    updateNetworks(data.data);
                } else if (data.message && data.message.includes('throttle')) {
                    // Handle throttled response
                    console.log('‚è≥ Scan throttled:', data.message);
                    updateStatus('throttled', data.message);
                    updateNetworks([]); // Show empty networks but not scanning
                } else {
                    console.log('‚ö†Ô∏è Scan response missing data or failed');
                    updateStatus('error', data.message || 'Scan failed');
                    updateNetworks([]);
                }
            })
            .catch(error => {
                console.error('‚ùå Scan error:', error);
                scanInProgress = false;
                updateScanButton(false); // Re-enable button
                updateStatus('error', 'Scan failed. Please try again.');
                updateNetworks([]); // Clear networks
            });
    }
}

function updateScanButton(scanning) {
    const scanBtn = document.getElementById('scanBtn');
    const scanBtnText = document.getElementById('scanBtnText');
    const scanSpinner = document.getElementById('scanSpinner');
    
    if (scanning) {
        scanBtn.disabled = true;
        scanBtnText.style.display = 'none';
        scanSpinner.style.display = 'inline-block';
    } else {
        scanBtn.disabled = false;
        scanBtnText.style.display = 'inline-block';
        scanSpinner.style.display = 'none';
    }
}

function selectNetwork(ssid) {
    document.getElementById('ssid').value = ssid;
    showManualForm(); // Automatically show the form when a network is selected
}

function showManualForm() {
    const manualForm = document.getElementById('manualConnectForm');
    const toggleBtn = document.getElementById('manualToggleBtn');
    const networksList = document.getElementById('networks');
    
    if (manualForm.style.display === 'none') {
        manualForm.style.display = 'block';
        toggleBtn.textContent = 'Hide Manual Entry';
        // Hide network list when manual entry is shown
        networksList.style.display = 'none';
    } else {
        manualForm.style.display = 'none';
        toggleBtn.textContent = 'Enter Manually';
        // Show network list when manual entry is hidden
        networksList.style.display = 'block';
    }
}

function connectToWiFi() {
    const ssid = document.getElementById('ssid').value;
    const password = document.getElementById('password').value;
    
    if (!ssid) {
        alert('Please enter a network name');
        return;
    }
    
    updateStatus('connecting', 'Connecting to ' + ssid + '...');
    
    const data = new FormData();
    data.append('ssid', ssid);
    data.append('password', password);
    
    // Add custom parameters to form data
    const form = document.getElementById('connectForm');
    if (form) {
        const formData = new FormData(form);
        for (let [key, value] of formData.entries()) {
            if (key !== 'ssid' && key !== 'password') {
                data.append(key, value);
            }
        }
    }
    
    fetch('/connect', {
        method: 'POST',
        body: data
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            updateStatus('connected', 'Connected successfully!');
            setTimeout(() => {
                window.location.href = '/';
            }, 3000);
        } else {
            updateStatus('failed', 'Connection failed: ' + data.message);
        }
    })
    .catch(error => {
        console.error('Connection error:', error);
        updateStatus('failed', 'Connection failed');
    });
}

function resetConfig() {
    if (confirm('Are you sure you want to reset the configuration?')) {
        fetch('/reset', {method: 'POST'})
            .then(() => {
                updateStatus('ready', 'Configuration reset');
                document.getElementById('ssid').value = '';
                document.getElementById('password').value = '';
                
                // Reset custom parameters
                const form = document.getElementById('connectForm');
                if (form) {
                    form.reset();
                }
            })
            .catch(error => console.error('Reset error:', error));
    }
}

function updateStatus(status, message) {
    const statusEl = document.getElementById('status');
    statusEl.className = 'status ' + status;
    statusEl.textContent = message || getStatusMessage(status);
}

function getStatusMessage(status) {
    switch(status) {
        case 'scanning': return 'üîÑ Scanning for networks...';
        case 'connecting': return '‚è≥ Connecting to network...';
        case 'connected': return '‚úÖ Connected successfully!';
        case 'failed': return '‚ùå Connection failed';
        case 'error': return '‚ùå Error occurred';
        case 'throttled': return '‚è≥ Scan throttled - please wait';
        default: return 'üîß Ready to configure';
    }
}

function updateNetworks(networks, isScanning = false) {
    console.log('üîÑ Updating networks UI with data:', networks, 'isScanning:', isScanning);
    const networksEl = document.getElementById('networks');
    
    if (isScanning) {
        // While scanning, show a scanning message instead of "No networks found"
        networksEl.innerHTML = '<p style="color: #92400e;">üîÑ Scanning...</p>';
        return;
    }
    
    if (!networks || networks.length === 0) {
        console.log('‚ö†Ô∏è No networks to display');
        networksEl.innerHTML = '<p>No networks found</p>';
        // Update status when no networks found (only if not currently scanning and no important status is showing)
        if (!scanInProgress) {
            const statusEl = document.getElementById('status');
            const currentStatus = statusEl.className;
            // Don't override error, throttled, or connecting statuses
            if (!currentStatus.includes('error') && !currentStatus.includes('throttled') && !currentStatus.includes('connecting')) {
                updateStatus('ready', 'No networks found. Try scanning again.');
            }
        }
        return;
    }
    
    // Update status when networks are found (always override any previous status)
    updateStatus('ready', 'Select a network or enter manually');
    
    console.log('‚úÖ Building HTML for', networks.length, 'networks');
    let html = '<div class="network-list">';
    networks.forEach(network => {
        const securityIcon = network.secure ? 'üîí' : 'üîì';
        let signalStrength = network.signal_strength || 'üì∂';
        
        html += '<div class="network-item" onclick="selectNetwork(\'' + 
                network.ssid.replace(/'/g, "\\'") + '\')">';
        html += '<span class="network-name">' + network.ssid + '</span>';
        html += '<span class="network-info">' + securityIcon + ' ' + signalStrength + '</span>';
        html += '</div>';
    });
    html += '</div>';
    networksEl.innerHTML = html;
    console.log('‚úÖ Networks UI updated successfully');
}

// Initialize
document.addEventListener('DOMContentLoaded', function() {
    initWebSocket();
    
    // Set up form submission
    const form = document.getElementById('connectForm');
    if (form) {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            connectToWiFi();
        });
    }
    
    // Set up scan button
    const scanBtn = document.getElementById('scanBtn');
    if (scanBtn) {
        scanBtn.addEventListener('click', scanNetworks);
    }
    
    // Set up manual toggle button
    const manualToggleBtn = document.getElementById('manualToggleBtn');
    if (manualToggleBtn) {
        manualToggleBtn.addEventListener('click', showManualForm);
    }
    
    // Set up reset button
    const resetBtn = document.getElementById('resetBtn');
    if (resetBtn) {
        resetBtn.addEventListener('click', resetConfig);
    }
    
    // Load initial networks from server-side scan (if available)
    loadInitialNetworks();
    
    // If no networks are shown, do a scan
    setTimeout(function() {
        const networksEl = document.getElementById('networks');
        if (!networksEl.innerHTML || networksEl.innerHTML.trim() === '' || 
            networksEl.innerHTML.includes('Scanning for networks')) {
            scanNetworks();
        }
    }, 500);
});

function loadInitialNetworks() {
    console.log('üîÑ Loading initial networks from /networks.json...');
    // Fetch networks.json to get the initial list from server-side scanning
    fetch('/networks.json')
        .then(response => {
            console.log('üì° networks.json response status:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('üìã networks.json data received:', data);
            if (data.networks && data.networks.length > 0) {
                console.log('‚úÖ Found', data.networks.length, 'networks, updating UI...');
                updateNetworks(data.networks);
                updateStatus('ready', 'Select a network or enter manually');
            } else {
                console.log('‚ÑπÔ∏è No networks found in initial data');
                updateStatus('ready', 'Click "Scan Networks" to find WiFi networks');
            }
        })
        .catch(error => {
            console.log('‚ùå Error loading initial networks:', error);
            updateStatus('ready', 'Click "Scan Networks" to find WiFi networks');
        });
})FLEXIFI";
const size_t js_portal_len = sizeof(js_portal) - 1;

    // Asset lookup functions
    const char* getTemplate(const char* name);
    const char* getCSS(const char* name);
    const char* getJS(const char* name);
    
    // Asset size functions
    size_t getTemplateSize(const char* name);
    size_t getCSSSize(const char* name);
    size_t getJSSize(const char* name);

} // namespace FlexifiAssets

#endif // FLEXIFI_WEB_ASSETS_H
